package com.luoboduner.moo.info.ui.form;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.luoboduner.moo.info.bean.ProcessInfo;
import com.luoboduner.moo.info.service.ProcessService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import java.awt.*;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.List;

public class ProcessInfoForm {
    private static final Logger LOG = LoggerFactory.getLogger(ProcessInfoForm.class);

    private static final String[] PROCESS_TABLE_HEADERS = {
            "序号", "PID", "进程名称", "进程路径"
    };

    private JPanel mainPanel;
    private JTable processTable;
    private JTextField queryProcessText;
    private JButton queryProcessButton;

    private static ProcessInfoForm INSTANCE;

    public static ProcessInfoForm getInstance() {
        if (INSTANCE == null) {
            INSTANCE = new ProcessInfoForm();
        }
        return INSTANCE;
    }

    public ProcessInfoForm() {
        reloadProcessTable("");
        addMouseListener();
        addKeyListener();
    }

    private void addMouseListener() {
        this.queryProcessButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                String queryStr = queryProcessText.getText();
                reloadProcessTable(queryStr);
            }
        });
    }

    private void addKeyListener() {
        this.queryProcessText.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getExtendedKeyCode() == KeyEvent.VK_ENTER) {
                    String queryStr = queryProcessText.getText();
                    reloadProcessTable(queryStr);
                }
            }
        });
    }

    public JPanel getMainPanel() {
        return this.mainPanel;
    }

    private void reloadProcessTable(String queryString) {
        ProcessService.getInstance().getAllProcessInfo(queryString).ifPresent(this::loadProcessTable);
    }

    private void loadProcessTable(List<ProcessInfo> processInfoList) {
        DefaultTableModel tableModel = new DefaultTableModel(PROCESS_TABLE_HEADERS, 0);
        for (int i = 0; i < processInfoList.size(); i++) {
            ProcessInfo processInfo = processInfoList.get(i);
            tableModel.addRow(new Object[]{
                    String.valueOf(i + 1),
                    processInfo.getPid(),
                    processInfo.getProcess_name(),
                    processInfo.getProcess_execute_path()
            });
        }

        processTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        processTable.clearSelection();
        processTable.setModel(tableModel);
        processTable.setShowGrid(true);

        // set font smaller
        Font newFont = new Font("", Font.PLAIN, 12);
        processTable.getTableHeader().setFont(newFont);
        processTable.getTableHeader().setLayout(new FlowLayout());
        processTable.setFont(newFont);

        TableColumnModel tableHeaderColumnModel = processTable.getTableHeader().getColumnModel();
        tableHeaderColumnModel.getColumn(0).setPreferredWidth(10);
        tableHeaderColumnModel.getColumn(1).setPreferredWidth(10);
        tableHeaderColumnModel.getColumn(2).setPreferredWidth(20);
        tableHeaderColumnModel.getColumn(3).setPreferredWidth(400);

        // set column width
        TableColumnModel tableColumnModel = processTable.getColumnModel();
        tableColumnModel.getColumn(0).setPreferredWidth(10);
        tableColumnModel.getColumn(1).setPreferredWidth(10);
        tableColumnModel.getColumn(2).setPreferredWidth(20);
        tableColumnModel.getColumn(3).setPreferredWidth(400);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(2, 1, new Insets(10, 50, 10, 50), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(10, 0, 0, 0), -1, -1));
        mainPanel.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("使用关键字，精确查找相关进程名称，进程路径");
        panel2.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        queryProcessText = new JTextField();
        queryProcessText.setText("");
        queryProcessText.setToolTipText("请输入域名，如果为空，查找全部域名");
        panel2.add(queryProcessText, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        queryProcessButton = new JButton();
        queryProcessButton.setText("查询");
        panel2.add(queryProcessButton, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        mainPanel.add(scrollPane1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        processTable = new JTable();
        scrollPane1.setViewportView(processTable);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }
}
