package com.luoboduner.moo.info.ui.form;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import lombok.Getter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import java.awt.*;

/**
 * The main interface
 *
 * @author <a href="https://github.com/rememberber">RememBerBer</a>
 * @since 2021/11/10.
 */
@Getter
public class MainWindow {

    private static final Logger LOG = LoggerFactory.getLogger(MainWindow.class);

    private JTabbedPane tabbedPane;
    private JPanel mainPanel;
    private JPanel netOverview;
    private JPanel processPanel2;
    private JPanel connectionPanel;
    private JPanel proxyPanel;
    private JPanel rulePanel;
    private JPanel dnsPanel;

    private static MainWindow mainWindow;

    private MainWindow() {
    }

    public static MainWindow getInstance() {
        if (mainWindow == null) {
            mainWindow = new MainWindow();
        }
        return mainWindow;
    }

    private static final GridConstraints gridConstraints = new GridConstraints(
            0, 0, 1, 1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_BOTH,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            new Dimension(200, 200),
            null,
            0,
            false
    );

    public void init() {
        mainWindow = getInstance();
        mainWindow.getProxyPanel().add(ProxyConfigForm.getInstance().getMainPanel(), gridConstraints);
        mainWindow.getDnsPanel().add(DnsConfigForm.getInstance().getMainPanel(), gridConstraints);
        mainWindow.getConnectionPanel().add(ConnectionForm.getInstance().getMainPanel(), gridConstraints);
        mainWindow.getRulePanel().add(RouteRuleForm.getInstance().getMainPanel(), gridConstraints);
        mainWindow.getNetOverview().add(NetOverviewForm.getInstance().getMainPanel(), gridConstraints);
        mainWindow.getProcessPanel2().add(ProcessInfoForm.getInstance().getMainPanel(), gridConstraints);

        tabbedPane.addChangeListener(e -> {
            if (tabbedPane.getSelectedIndex() == 0) {
                NetOverviewForm.getInstance().loadNetOverview();
            }
        });
        // add other panel
        mainWindow.getMainPanel().updateUI();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        tabbedPane = new JTabbedPane();
        tabbedPane.setTabLayoutPolicy(1);
        tabbedPane.setTabPlacement(2);
        mainPanel.add(tabbedPane, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(200, 200), null, 0, false));
        netOverview = new JPanel();
        netOverview.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        tabbedPane.addTab("运行概况", netOverview);
        processPanel2 = new JPanel();
        processPanel2.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        tabbedPane.addTab("进程配置", processPanel2);
        connectionPanel = new JPanel();
        connectionPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        tabbedPane.addTab("网络连接", connectionPanel);
        proxyPanel = new JPanel();
        proxyPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        tabbedPane.addTab("代理配置", proxyPanel);
        rulePanel = new JPanel();
        rulePanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        tabbedPane.addTab("路由配置", rulePanel);
        dnsPanel = new JPanel();
        dnsPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        tabbedPane.addTab("dns代理", dnsPanel);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

}
